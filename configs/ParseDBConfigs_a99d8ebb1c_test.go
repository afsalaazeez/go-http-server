/*
Test generated by RoostGPT for test bitci using AI Type Open AI and AI Model gpt-4

1. Scenario: Test when all environment variables are set correctly.
  - Set all DB environment variables (DB_USER, DB_PASSWORD, DB_HOST, DB_PORT, DB_NAME).
  - Call the ParseDBConfigs() function.
  - Expect no error to be returned and the returned DBConfigs struct to contain the expected values.

2. Scenario: Test when none of the environment variables are set.
  - Do not set any DB environment variables.
  - Call the ParseDBConfigs() function.
  - Expect an error to be returned as all variables are required.

3. Scenario: Test when the .env file does not exist or is not accessible.
  - Ensure the .env file does not exist or is not accessible.
  - Call the ParseDBConfigs() function.
  - Expect an error to be returned indicating that the .env file could not be loaded.

4. Scenario: Test when some environment variables are missing.
  - Set only some DB environment variables.
  - Call the ParseDBConfigs() function.
  - Expect an error to be returned indicating that some required variables are missing.

5. Scenario: Test when environment variables are set with invalid values.
  - Set DB environment variables with invalid values (e.g., non-numeric DB_PORT).
  - Call the ParseDBConfigs() function.
  - Expect an error to be returned indicating that the variables could not be parsed.

6. Scenario: Test when the default values are used.
  - Set all DB environment variables except those with default values (DB_USER and DB_NAME).
  - Call the ParseDBConfigs() function.
  - Expect no error to be returned and the returned DBConfigs struct to contain the expected values, including the default values for DB_USER and DB_NAME.

7. Scenario: Test when the environment variables are set but empty.
  - Set all DB environment variables but leave their values empty.
  - Call the ParseDBConfigs() function.
  - Expect an error to be returned indicating that some required variables are empty.
*/
package configs

import (
	"os"
	"testing"
)

func TestParseDBConfigs_a99d8ebb1c(t *testing.T) {
	type test struct {
		name    string
		setup   func()
		wantErr bool
		want    DBConfigs
	}

	tests := []test{
		{
			name: "All environment variables are set correctly",
			setup: func() {
				os.Setenv("DB_USER", "testuser")
				os.Setenv("DB_PASSWORD", "testpass")
				os.Setenv("DB_HOST", "localhost")
				os.Setenv("DB_PORT", "5432")
				os.Setenv("DB_NAME", "testdb")
			},
			wantErr: false,
			want: DBConfigs{
				User:     "testuser",
				Password: "testpass",
				Host:     "localhost",
				Port:     5432,
				Database: "testdb",
			},
		},
		{
			name:    "None of the environment variables are set",
			setup:   func() {},
			wantErr: true,
		},
		{
			name: "Some environment variables are missing",
			setup: func() {
				os.Setenv("DB_USER", "testuser")
			},
			wantErr: true,
		},
		{
			name: "Environment variables are set with invalid values",
			setup: func() {
				os.Setenv("DB_PORT", "invalid")
			},
			wantErr: true,
		},
		{
			name: "Default values are used",
			setup: func() {
				os.Setenv("DB_PASSWORD", "testpass")
				os.Setenv("DB_HOST", "localhost")
				os.Setenv("DB_PORT", "5432")
			},
			wantErr: false,
			want: DBConfigs{
				User:     "postgres",
				Password: "testpass",
				Host:     "localhost",
				Port:     5432,
				Database: "postgres",
			},
		},
		{
			name: "Environment variables are set but empty",
			setup: func() {
				os.Setenv("DB_USER", "")
				os.Setenv("DB_PASSWORD", "")
				os.Setenv("DB_HOST", "")
				os.Setenv("DB_PORT", "")
				os.Setenv("DB_NAME", "")
			},
			wantErr: true,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Setup test
			tc.setup()

			// Call function
			got, err := ParseDBConfigs()

			// Check for error
			if (err != nil) != tc.wantErr {
				t.Errorf("ParseDBConfigs() error = %v, wantErr %v", err, tc.wantErr)
				return
			}

			// Check result
			if !tc.wantErr && got != tc.want {
				t.Errorf("ParseDBConfigs() = %v, want %v", got, tc.want)
			}
		})
	}
}
